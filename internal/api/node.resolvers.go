package api

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"strings"

	"github.com/exepirit/yggmap/internal/api/dto"
	"github.com/exepirit/yggmap/internal/data/entity"
)

// Neighbors is the resolver for the neighbors field.
func (r *yggdrasilNodeResolver) Neighbors(ctx context.Context, obj *dto.YggdrasilNode) ([]*dto.YggdrasilNodeLink, error) {
	// fetch neighbors keys
	neighborsKeys := make([]string, 0)
	err := r.LinksLoader.Provider.Iterate(ctx, nil, func(key string, link entity.NodeLink) bool {
		if strings.HasPrefix(key, obj.PublicKey) {
			neighborsKeys = append(neighborsKeys, link.In.String())
		}
		return true
	})
	if err != nil {
		return nil, err
	}

	// fetch neighbors
	nodes, err := r.NodesLoader.LoadBatch(ctx, neighborsKeys, true)
	if err != nil {
		return nil, err
	}

	// map to response model
	response := make([]*dto.YggdrasilNodeLink, 0, len(nodes))
	for _, node := range nodes {
		response = append(response, &dto.YggdrasilNodeLink{
			Node: mapYggdrasilNodeToDto(node),
		})
	}
	return response, nil
}

// YggdrasilNode returns YggdrasilNodeResolver implementation.
func (r *Resolver) YggdrasilNode() YggdrasilNodeResolver { return &yggdrasilNodeResolver{r} }

type yggdrasilNodeResolver struct{ *Resolver }
